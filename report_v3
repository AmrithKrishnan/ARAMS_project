**Component: Image Processing**

**Node: crop_raw_img**

The "crop_raw_img" node is responsible for processing raw images from the "/prius/front_camera/image_raw" topic. It uses OpenCV to crop the top right corner, isolating the area for YOLO-based traffic light detection. The cropped image is then published to the "/traffic_light_roi" topic for further processing and to the "/output_opencv" topic for visualization in rviz. This node plays a crucial role in preprocessing camera data to extract the region of interest, facilitating subsequent traffic light detection.

**Node: traffic_light_detect**

The "traffic_light_detect" node subscribes to the "/traffic_light_cropped" topic to receive cropped images of traffic lights. It processes the images using HSV color space conversion and applies masks to filter out specific colors (green, yellow, and red). Morphological operations are performed to remove noise from the filtered images.

Using the HoughCircles algorithm, the node detects circular blobs in the filtered images. By comparing the number of pixels in each color's mask, it determines the predominant color, indicating the status of the traffic light.

The node publishes the processed image to the "/output_opencv" topic for visualization in RViz. Additionally, it publishes the status of the traffic light as a String message on the "/status_message" topic, with numerical values "3" for green, "2" for yellow, "1" for red, and "4" for no traffic light detected.

The "traffic_light_detect" node is an essential component of the autonomous driving system, enabling the detection and communication of traffic light status for safe navigation of the Prius car in the ARAMS virtual city.

**Node: prius_cmd_vel_mirror**

The `prius_cmd_vel_mirror` node is responsible for mirroring the Twist messages received on the `/cmd_vel` topic to the `/prius/cmd_vel` topic. This is done to ensure that the Prius car, which works with the `/prius/cmd_vel` topic, can receive and understand the velocity commands generated by the navigation stack (nav2) on the `/cmd_vel` topic.

The node subscribes to the `/cmd_vel` topic, where it receives the velocity commands generated by the navigation stack during autonomous navigation. It then publishes these commands to the `/prius/cmd_vel` topic, where they can be received and executed by the Prius car.

The purpose of this node is for debugging and testing the nav2 stack with the Prius car. It allows us to verify that the navigation commands generated by the stack are correctly received and executed by the Prius car. However, in the final part of the project, a different node is used to integrate motion based on traffic light detections as well, and the `prius_cmd_vel_mirror` node is not used in that scenario.

**Node: prius_cmd_vel_traffic_light**

This node is responsible for controlling the velocity commands sent to the Prius car based on the traffic light color detected by the `traffic_light_detect` node.

The `prius_cmd_vel_traffic_light` node subscribes to the `/status_message` topic, where it receives messages indicating the color of the traffic light detected by the `traffic_light_detect` node. Depending on the color received (red, yellow, or green), the node sets appropriate velocity commands to control the motion of the Prius car.

When a red light is detected, the node stops the car by setting its linear velocity to 0. When a yellow light is detected, the car is commanded to move at a reduced speed, and when a green light is detected, the car is allowed to move at its regular speed.

This node plays a crucial role in integrating the traffic light information with the car's navigation system, ensuring that the car responds appropriately to traffic signals during autonomous driving.

**Node: auto_explorer**

This node is responsible for generating and sending random navigation goals to the Prius car, allowing the car to navigate to these positions in sequence. It is an essential component of the autonomous exploration system.

The `auto_explorer` node operates by choosing three random navigation goals from a fixed set of twelve predefined coordinates. These coordinates are strategically placed throughout the environment to ensure comprehensive exploration. Once the goals are selected, the node sends these goals to the navigation system, guiding the Prius car to navigate to each position in a sequence.

The `auto_explorer` node continuously generates new goals for the Prius car, ensuring that the exploration process covers a wide range of areas in the environment. This enables the car to explore the entire map autonomously without any manual intervention.

**Node: yolo_node**

The `TrafficLightDetector` class is a ROS2 node that subscribes to the `/traffic_light_roi` topic, where it receives raw images that are cropped to the region of interest (ROI) containing traffic lights. The node processes these images using YOLOv4, a pre-trained object detection neural network, to detect objects and identify traffic lights and trucks.

Upon receiving an image, the `image_callback` function is triggered. The function first converts the ROS2 Image message to an OpenCV image with rgb8 encoding. It then runs the YOLOv4 model on the preprocessed image to detect objects, and it extracts the detected traffic light regions.

If the YOLOv4 model detects a traffic light, the corresponding region is cropped and published to the `/traffic_light_cropped` topic as a new ROS2 Image message. Additionally, if the model detects a truck, the node publishes a `String` message with the value "1" to the `/truck_status` topic.

